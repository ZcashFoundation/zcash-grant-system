from datetime import datetime
from decimal import Decimal
from functools import reduce
from random import randint
from math import floor

from flask import Blueprint, request
from marshmallow import fields, validate
from sqlalchemy import func, or_

import grant.utils.admin as admin
import grant.utils.auth as auth
from grant.comment.models import Comment, user_comments_schema, admin_comments_schema, admin_comment_schema
from grant.email.send import generate_email, send_email
from grant.extensions import db
from grant.milestone.models import Milestone
from grant.parser import body, query, paginated_fields
from grant.proposal.models import (
    Proposal,
    ProposalArbiter,
    ProposalContribution,
    proposals_schema,
    proposal_schema,
    user_proposal_contributions_schema,
    admin_proposal_contribution_schema,
    admin_proposal_contributions_schema,
)
from grant.rfp.models import RFP, admin_rfp_schema, admin_rfps_schema
from grant.settings import EXPLORER_URL
from grant.user.models import User, UserSettings, admin_users_schema, admin_user_schema
from grant.utils import pagination

from grant.utils.enums import (
    ProposalStatus,
    ProposalStage,
    Category,
    ContributionStatus,
    ProposalArbiterStatus,
    MilestoneStage,
    RFPStatus,
)
from grant.utils.misc import make_url
# from .example_emails import example_email_args

last_email = None


def create_proposals(count, category, stage, with_comments=False):
    user = User.query.filter_by().first()
    for i in range(count):
        p = Proposal.create(
            stage=stage,
            status=ProposalStatus.LIVE,
            title=f'Fake Proposal #{i} {category} {stage}',
            content=f'My fake proposal content, numero {i}',
            brief=f'This is proposal {i} generated by e2e testing',
            category=category,
            target="123.456",
            payout_address="fake123",
            deadline_duration=100
        )
        p.date_published = datetime.now()
        p.team.append(user)
        db.session.add(p)
        db.session.flush()
        num_ms = randint(1, 9)
        for j in range(num_ms):
            m = Milestone(
                title=f'Fake MS {j}',
                content=f'Fake milestone #{j} on fake proposal #{i} {category} {stage}!',
                date_estimated=datetime.now(),
                payout_percent=str(floor(1 / num_ms * 100)),
                immediate_payout=j == 0,
                proposal_id=p.id,
                index=j
            )
            db.session.add(m)
        # limit comment creation as it is slow
        if i == 0 and with_comments:
            for j in range(31):
                c = Comment(
                    proposal_id=p.id,
                    user_id=user.id,
                    parent_comment_id=None,
                    content=f'Fake comment #{j} on fake proposal #{i} {category} {stage}!'
                )
                db.session.add(c)

    # db.session.flush()
    print(f'Added {count} LIVE fake proposals')


def create_user(key: str):
    user = User.create(
        email_address=f"{key}@testing.e2e",
        password="e2epassword",
        display_name=f"{key} Endtoenderson",
        title=f"title{key}",
    )
    user.email_verification.has_verified = True
    db.session.add(user)
    db.session.flush()
    return admin_user_schema.dump(user)


blueprint = Blueprint('e2e', __name__, url_prefix='/api/v1/e2e')


@blueprint.route("/setup", methods=["GET"])
def setup():
    db.session.commit()  # important, otherwise drop_all hangs
    db.drop_all()
    db.session.commit()
    db.create_all()
    db.session.commit()
    default_user = create_user('default')
    other_user = create_user('other')
    create_proposals(12, Category.COMMUNITY, ProposalStage.FUNDING_REQUIRED, True)
    create_proposals(13, Category.CORE_DEV, ProposalStage.WIP)
    create_proposals(15, Category.DOCUMENTATION, ProposalStage.COMPLETED)
    create_proposals(5, Category.ACCESSIBILITY, ProposalStage.FAILED)
    db.session.commit()
    return {
        'default_user': default_user,
        'other_user': other_user,
        'proposalCounts': {
            'categories': [
                {"key": Category.COMMUNITY, "count": 12},
                {"key": Category.CORE_DEV, "count": 13},
                {"key": Category.DOCUMENTATION, "count": 15},
                {"key": Category.ACCESSIBILITY, "count": 5},
            ],
            'stages': [
                {"key": ProposalStage.FUNDING_REQUIRED, "count": 12},
                {"key": ProposalStage.WIP, "count": 13},
                {"key": ProposalStage.COMPLETED, "count": 15},
                {"key": ProposalStage.FAILED, "count": 5},
            ]
        }
    }


@blueprint.route("/email", methods=["GET"])
def get_email():
    return last_email
